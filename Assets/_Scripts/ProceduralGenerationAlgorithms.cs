using System.Collections;
using System.Collections.Generic;
using UnityEngine;

public static class ProceduralGenerationAlgorithms
{
    /// <summary>
    /// Ggenerates a random path of walkLength steps starting from a given startPosition in a two-dimensional grid
    /// system. The path is generated by iteratively adding a new position to a HashSet of positions (path) that
    /// have been visited. The new position is obtained by adding a random cardinal direction (up, down, left, or
    /// right) to the previous position.
    /// 
    /// At the end, the method returns the set of positions visited during the random walk.
    /// --==+ Summary made by chatGPT +==--
    /// </summary>
    /// <param name="startPosition"></param>
    /// <param name="walkLength"></param>
    /// <returns></returns>
    public static HashSet<Vector2Int> SimpleRandomWalk(Vector2Int startPosition, int walkLength)
    {
        HashSet<Vector2Int> path = new HashSet<Vector2Int>();
        
        path.Add(startPosition);
        var previousPosition = startPosition;

        for (int i = 0; i < walkLength; i++)
        {
            var newPosition = previousPosition + Direction2D.GetRandomCardinalDirection();
            path.Add(newPosition);
            previousPosition = newPosition;
        }
        return path;
    }
}

public static class Direction2D
{
    public static List<Vector2Int> cardinalDirectionsList = new List<Vector2Int>()
    {
        new Vector2Int(0, 1),  // UP
        new Vector2Int(1, 0),  // RIGHT
        new Vector2Int(0, -1), // DOWN
        new Vector2Int(-1, 0)  // LEFT
    };

    public static Vector2Int GetRandomCardinalDirection()
    {
        return cardinalDirectionsList[Random.Range(0, cardinalDirectionsList.Count)];
    }
}
